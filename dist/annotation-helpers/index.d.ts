// Generated by dts-bundle-generator v8.0.1

import { AnnotationNormalized, AnnotationPageNormalized, AnnotationTarget } from '@iiif/presentation-3';
import { IncomingHttpHeaders } from 'http';
import { Options as OpenSeadragonOptions } from 'openseadragon';

export type AnnotationResources = AnnotationPageNormalized[];
export interface ParsedAnnotationTarget {
	id: string;
	point?: {
		x: number;
		y: number;
	};
	rect?: {
		x: number;
		y: number;
		w: number;
		h: number;
	};
	svg?: string;
	t?: string;
}
export type AutoScrollSettings = {
	behavior: string;
	block: string;
};
export type AutoScrollOptions = {
	enabled: boolean;
	settings: AutoScrollSettings;
};
export type ViewerConfigOptions = {
	annotationOverlays?: OverlayOptions;
	background?: string;
	canvasBackgroundColor?: string;
	canvasHeight?: string;
	contentSearch?: {
		searchResultsLimit?: number;
		overlays?: OverlayOptions;
	};
	ignoreCaptionLabels?: string[];
	ignoreAnnotationOverlaysLabels?: string[];
	informationPanel?: {
		open?: boolean;
		renderAbout?: boolean;
		renderSupplementing?: boolean;
		renderToggle?: boolean;
		renderAnnotation?: boolean;
		vtt?: {
			autoScroll?: AutoScrollOptions | AutoScrollSettings | boolean;
		};
		renderContentSearch?: boolean;
		defaultTab?: string;
	};
	openSeadragon?: OpenSeadragonOptions;
	requestHeaders?: IncomingHttpHeaders;
	showDownload?: boolean;
	showIIIFBadge?: boolean;
	showTitle?: boolean;
	withCredentials?: boolean;
	localeText?: {
		contentSearch?: {
			tabLabel?: string;
			formPlaceholder?: string;
			noSearchResults?: string;
			loading?: string;
			moreResults?: string;
		};
	};
};
export type OverlayOptions = {
	backgroundColor?: string;
	borderColor?: string;
	borderType?: string;
	borderWidth?: string;
	opacity?: string;
	renderOverlays?: boolean;
	zoomLevel?: number;
};
export type AnnotationTargetExtended = AnnotationTarget & {
	selector?: any;
	source?: string;
	svg?: string;
};
export declare const parseAnnotationTarget: (target: AnnotationTargetExtended | string) => ParsedAnnotationTarget;
export declare const parseAnnotationsFromAnnotationResources: (annotationResources: AnnotationResources, vault: any, configOptions: ViewerConfigOptions) => AnnotationNormalized[];

export {};
