{"version":3,"file":"index.mjs","sources":["../../src/hooks/use-iiif/getLabel.ts","../../src/lib/annotation-helpers.ts"],"sourcesContent":["import { InternationalString } from \"@iiif/presentation-3\";\n\n// Get string from a IIIF pres 3 label by language code\nexport const getLabel = (\n  label: InternationalString,\n  language: string = \"en\",\n) => {\n  /*\n   * If no label exists, return an empty string.\n   */\n  if (!label) return \"\";\n\n  /*\n   * If InternationalString code does not exist on label, then\n   * return what may be there, ex: label.none[0] OR label.fr[0]\n   */\n  if (!label[language]) {\n    const codes: Array<string> = Object.getOwnPropertyNames(label);\n    if (codes.length > 0) return label[codes[0]];\n  }\n\n  /*\n   * Return label value for InternationalString code `en`\n   */\n  return label[language];\n};\n","import { AnnotationTarget, AnnotationNormalized } from \"@iiif/presentation-3\";\nimport { ParsedAnnotationTarget } from \"src/types/annotations\";\nimport { getLabel } from \"src/hooks/use-iiif\";\nimport { AnnotationResources } from \"src/types/annotations\";\nimport { type ViewerConfigOptions } from \"src/context/viewer-context\";\n\nexport type AnnotationTargetExtended = AnnotationTarget & {\n  selector?: any;\n  source?: string;\n  svg?: string;\n};\n\nconst parseAnnotationTarget = (target: AnnotationTargetExtended | string) => {\n  let parsedTarget: ParsedAnnotationTarget = {\n    id: typeof target === \"string\" ? target : target.source,\n  };\n\n  if (typeof target === \"string\") {\n    if (target.includes(\"#xywh=\")) {\n      const parts = target.split(\"#xywh=\");\n      if (parts && parts[1]) {\n        const [x, y, w, h] = parts[1].split(\",\").map((value) => Number(value));\n        parsedTarget = {\n          id: parts[0],\n          rect: {\n            x,\n            y,\n            w,\n            h,\n          },\n        };\n      }\n    } else if (target.includes(\"#t=\")) {\n      const parts = target.split(\"#t=\");\n      if (parts && parts[1]) {\n        parsedTarget = {\n          id: parts[0],\n          t: parts[1],\n        };\n      }\n    }\n  } else if (typeof target === \"object\") {\n    if (target.selector?.type === \"PointSelector\") {\n      parsedTarget = {\n        id: target.source,\n        point: {\n          x: target.selector.x!,\n          y: target.selector.y!,\n        },\n      };\n    } else if (target.selector?.type === \"SvgSelector\") {\n      parsedTarget = {\n        id: target.source,\n        svg: target.selector.value,\n      };\n    } else if (target.selector?.type === \"FragmentSelector\") {\n      if (\n        target.selector?.value.includes(\"xywh=\") &&\n        target.source.type == \"Canvas\" &&\n        target.source.id\n      ) {\n        const parts = target.selector?.value.split(\"xywh=\");\n        if (parts && parts[1]) {\n          const [x, y, w, h] = parts[1]\n            .split(\",\")\n            .map((value) => Number(value));\n\n          parsedTarget = {\n            id: target.source.id,\n            rect: {\n              x,\n              y,\n              w,\n              h,\n            },\n          };\n        }\n      }\n    }\n  }\n\n  return parsedTarget;\n};\n\nconst parseAnnotationsFromAnnotationResources = (\n  annotationResources: AnnotationResources,\n  vault: any,\n  configOptions: ViewerConfigOptions,\n) => {\n  const annotations: Array<AnnotationNormalized> = [];\n  annotationResources\n    .filter((annotationResource) => {\n      if (annotationResource.label) {\n        const label = getLabel(annotationResource.label);\n        if (Array.isArray(label)) {\n          return !label.some((value) =>\n            configOptions.ignoreAnnotationOverlaysLabels?.includes(value),\n          );\n        }\n      }\n\n      return true;\n    })\n    .forEach((annotationResource) => {\n      annotationResource?.items?.forEach((item) => {\n        const annotation = vault.get(item.id);\n        annotations.push(annotation as unknown as AnnotationNormalized);\n      });\n    });\n\n  return annotations;\n};\n\nexport { parseAnnotationTarget, parseAnnotationsFromAnnotationResources };\n"],"names":["getLabel","label","language","codes","parseAnnotationTarget","target","_a","_b","_c","_d","_e","parsedTarget","parts","x","y","w","h","value","parseAnnotationsFromAnnotationResources","annotationResources","vault","configOptions","annotations","annotationResource","item","annotation"],"mappings":"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"}