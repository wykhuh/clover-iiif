{"version":3,"file":"index.umd.js","sources":["../../src/hooks/use-iiif/getLabel.ts","../../src/lib/annotation-helpers.ts"],"sourcesContent":["import { InternationalString } from \"@iiif/presentation-3\";\n\n// Get string from a IIIF pres 3 label by language code\nexport const getLabel = (\n  label: InternationalString,\n  language: string = \"en\",\n) => {\n  /*\n   * If no label exists, return an empty string.\n   */\n  if (!label) return \"\";\n\n  /*\n   * If InternationalString code does not exist on label, then\n   * return what may be there, ex: label.none[0] OR label.fr[0]\n   */\n  if (!label[language]) {\n    const codes: Array<string> = Object.getOwnPropertyNames(label);\n    if (codes.length > 0) return label[codes[0]];\n  }\n\n  /*\n   * Return label value for InternationalString code `en`\n   */\n  return label[language];\n};\n","import { AnnotationTarget, AnnotationNormalized } from \"@iiif/presentation-3\";\nimport { ParsedAnnotationTarget } from \"src/types/annotations\";\nimport { getLabel } from \"src/hooks/use-iiif\";\nimport { AnnotationResources } from \"src/types/annotations\";\nimport { type ViewerConfigOptions } from \"src/context/viewer-context\";\n\nexport type AnnotationTargetExtended = AnnotationTarget & {\n  selector?: any;\n  source?: string;\n  svg?: string;\n};\n\nconst parseAnnotationTarget = (target: AnnotationTargetExtended | string) => {\n  let parsedTarget: ParsedAnnotationTarget = {\n    id: typeof target === \"string\" ? target : target.source,\n  };\n\n  if (typeof target === \"string\") {\n    if (target.includes(\"#xywh=\")) {\n      const parts = target.split(\"#xywh=\");\n      if (parts && parts[1]) {\n        const [x, y, w, h] = parts[1].split(\",\").map((value) => Number(value));\n        parsedTarget = {\n          id: parts[0],\n          rect: {\n            x,\n            y,\n            w,\n            h,\n          },\n        };\n      }\n    } else if (target.includes(\"#t=\")) {\n      const parts = target.split(\"#t=\");\n      if (parts && parts[1]) {\n        parsedTarget = {\n          id: parts[0],\n          t: parts[1],\n        };\n      }\n    }\n  } else if (typeof target === \"object\") {\n    if (target.selector?.type === \"PointSelector\") {\n      parsedTarget = {\n        id: target.source,\n        point: {\n          x: target.selector.x!,\n          y: target.selector.y!,\n        },\n      };\n    } else if (target.selector?.type === \"SvgSelector\") {\n      parsedTarget = {\n        id: target.source,\n        svg: target.selector.value,\n      };\n    } else if (target.selector?.type === \"FragmentSelector\") {\n      if (\n        target.selector?.value.includes(\"xywh=\") &&\n        target.source.type == \"Canvas\" &&\n        target.source.id\n      ) {\n        const parts = target.selector?.value.split(\"xywh=\");\n        if (parts && parts[1]) {\n          const [x, y, w, h] = parts[1]\n            .split(\",\")\n            .map((value) => Number(value));\n\n          parsedTarget = {\n            id: target.source.id,\n            rect: {\n              x,\n              y,\n              w,\n              h,\n            },\n          };\n        }\n      }\n    }\n  }\n\n  return parsedTarget;\n};\n\nconst parseAnnotationsFromAnnotationResources = (\n  annotationResources: AnnotationResources,\n  vault: any,\n  configOptions: ViewerConfigOptions,\n) => {\n  const annotations: Array<AnnotationNormalized> = [];\n  annotationResources\n    .filter((annotationResource) => {\n      if (annotationResource.label) {\n        const label = getLabel(annotationResource.label);\n        if (Array.isArray(label)) {\n          return !label.some((value) =>\n            configOptions.ignoreAnnotationOverlaysLabels?.includes(value),\n          );\n        }\n      }\n\n      return true;\n    })\n    .forEach((annotationResource) => {\n      annotationResource?.items?.forEach((item) => {\n        const annotation = vault.get(item.id);\n        annotations.push(annotation as unknown as AnnotationNormalized);\n      });\n    });\n\n  return annotations;\n};\n\nexport { parseAnnotationTarget, parseAnnotationsFromAnnotationResources };\n"],"names":["getLabel","label","language","codes","parseAnnotationTarget","target","parsedTarget","parts","x","y","w","h","value","_a","_b","_c","_d","_e","parseAnnotationsFromAnnotationResources","annotationResources","vault","configOptions","annotations","annotationResource","item","annotation"],"mappings":"mPAGO,MAAMA,EAAW,CACtBC,EACAC,EAAmB,OAChB,CAIH,GAAI,CAACD,EAAc,MAAA,GAMf,GAAA,CAACA,EAAMC,CAAQ,EAAG,CACd,MAAAC,EAAuB,OAAO,oBAAoBF,CAAK,EAC7D,GAAIE,EAAM,OAAS,EAAU,OAAAF,EAAME,EAAM,CAAC,CAAC,CAC7C,CAKA,OAAOF,EAAMC,CAAQ,CACvB,ECbME,EAAyBC,GAA8C,eAC3E,IAAIC,EAAuC,CACzC,GAAI,OAAOD,GAAW,SAAWA,EAASA,EAAO,MAAA,EAG/C,GAAA,OAAOA,GAAW,UAChB,GAAAA,EAAO,SAAS,QAAQ,EAAG,CACvB,MAAAE,EAAQF,EAAO,MAAM,QAAQ,EAC/B,GAAAE,GAASA,EAAM,CAAC,EAAG,CACrB,KAAM,CAACC,EAAGC,EAAGC,EAAGC,CAAC,EAAIJ,EAAM,CAAC,EAAE,MAAM,GAAG,EAAE,IAAKK,GAAU,OAAOA,CAAK,CAAC,EACtDN,EAAA,CACb,GAAIC,EAAM,CAAC,EACX,KAAM,CACJ,EAAAC,EACA,EAAAC,EACA,EAAAC,EACA,EAAAC,CACF,CAAA,CAEJ,CACS,SAAAN,EAAO,SAAS,KAAK,EAAG,CAC3B,MAAAE,EAAQF,EAAO,MAAM,KAAK,EAC5BE,GAASA,EAAM,CAAC,IACHD,EAAA,CACb,GAAIC,EAAM,CAAC,EACX,EAAGA,EAAM,CAAC,CAAA,EAGhB,UACS,OAAOF,GAAW,UACvB,KAAAQ,EAAAR,EAAO,WAAP,YAAAQ,EAAiB,QAAS,gBACbP,EAAA,CACb,GAAID,EAAO,OACX,MAAO,CACL,EAAGA,EAAO,SAAS,EACnB,EAAGA,EAAO,SAAS,CACrB,CAAA,YAEOS,EAAAT,EAAO,WAAP,YAAAS,EAAiB,QAAS,cACpBR,EAAA,CACb,GAAID,EAAO,OACX,IAAKA,EAAO,SAAS,KAAA,YAEdU,EAAAV,EAAO,WAAP,YAAAU,EAAiB,QAAS,qBAEjCC,EAAAX,EAAO,WAAP,MAAAW,EAAiB,MAAM,SAAS,UAChCX,EAAO,OAAO,MAAQ,UACtBA,EAAO,OAAO,GACd,CACA,MAAME,GAAQU,EAAAZ,EAAO,WAAP,YAAAY,EAAiB,MAAM,MAAM,SACvC,GAAAV,GAASA,EAAM,CAAC,EAAG,CACrB,KAAM,CAACC,EAAGC,EAAGC,EAAGC,CAAC,EAAIJ,EAAM,CAAC,EACzB,MAAM,GAAG,EACT,IAAKK,GAAU,OAAOA,CAAK,CAAC,EAEhBN,EAAA,CACb,GAAID,EAAO,OAAO,GAClB,KAAM,CACJ,EAAAG,EACA,EAAAC,EACA,EAAAC,EACA,EAAAC,CACF,CAAA,CAEJ,CACF,EAIG,OAAAL,CACT,EAEMY,EAA0C,CAC9CC,EACAC,EACAC,IACG,CACH,MAAMC,EAA2C,CAAA,EAE9C,OAAAH,EAAA,OAAQI,GAAuB,CAC9B,GAAIA,EAAmB,MAAO,CACtB,MAAAtB,EAAQD,EAASuB,EAAmB,KAAK,EAC3C,GAAA,MAAM,QAAQtB,CAAK,EACrB,MAAO,CAACA,EAAM,KAAMW,GAAA,OAClB,OAAAC,EAAAQ,EAAc,iCAAd,YAAAR,EAA8C,SAASD,GAAK,CAGlE,CAEO,MAAA,EAAA,CACR,EACA,QAASW,GAAuB,QACXV,EAAAU,GAAA,YAAAA,EAAA,QAAA,MAAAV,EAAO,QAASW,GAAS,CAC3C,MAAMC,EAAaL,EAAM,IAAII,EAAK,EAAE,EACpCF,EAAY,KAAKG,CAA6C,CAAA,EAC/D,CACF,EAEIH,CACT"}