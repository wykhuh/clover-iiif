// Generated by dts-bundle-generator v8.0.1

import { Collection, IIIFExternalWebResource, InternationalString, Manifest, MetadataItem } from '@iiif/presentation-3';
import { IncomingHttpHeaders } from 'http';
import { Options as OpenSeadragonOptions } from 'openseadragon';
import React from 'react';
import { ReactElement, ReactNode } from 'react';
import { SwiperProps } from 'swiper/react';

export interface PrimitivesPrimitive extends React.HTMLAttributes<HTMLElement> {
}
export interface PrimitivesCustomValueContent {
	matchingLabel: InternationalString;
	Content: ReactElement;
}
export interface PrimitivesMetadataItem extends PrimitivesPrimitive {
	item: MetadataItem;
	customValueContent?: ReactElement;
	customValueDelimiter?: string;
}
export interface PrimitivesContentResource extends PrimitivesPrimitive {
	altAsLabel?: InternationalString;
	contentResource: PrimitivesExternalWebResource;
	region?: string;
}
export interface PrimitivesExternalWebResource {
	id: string;
	type: "Dataset" | "Image" | "Video" | "Sound" | "Text";
	format?: string;
	label?: InternationalString;
	language?: string | string[];
	duration?: number;
	width?: number;
	height?: number;
	profle?: string;
}
export interface PrimitivesIIIFResource {
	id: string;
	type: "Collection" | "Manifest";
	label?: InternationalString | undefined;
}
export interface PrimitivesHomepage extends PrimitivesPrimitive {
	children?: ReactNode | ReactNode[];
	homepage: PrimitivesExternalWebResource[];
}
export interface PrimitivesLabel extends PrimitivesPrimitive {
	as?: "dd" | "dt" | "figcaption" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "label" | "p" | "span";
	label: InternationalString;
}
export interface PrimitivesMarkup extends PrimitivesPrimitive {
	as?: "span" | "p" | "label" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "dd";
	markup?: InternationalString;
}
export interface PrimitivesMetadata extends PrimitivesPrimitive {
	as?: "dl";
	customValueContent?: PrimitivesCustomValueContent[];
	customValueDelimiter?: string;
	metadata: MetadataItem[];
}
export interface PrimitivesPartOf extends PrimitivesPrimitive {
	as?: "ol" | "ul";
	partOf: PrimitivesIIIFResource[];
}
export interface PrimitivesRequiredStatement extends PrimitivesPrimitive {
	as?: "dl";
	customValueDelimiter?: string;
	requiredStatement: MetadataItem;
}
export interface PrimitivesSeeAlso extends PrimitivesPrimitive {
	as?: "ol" | "ul";
	seeAlso: PrimitivesExternalWebResource[];
}
export interface PrimitivesSummary extends PrimitivesPrimitive {
	as?: "span" | "p" | "label" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
	customValueDelimiter?: string;
	summary: InternationalString;
}
export interface PrimitivesThumbnail extends PrimitivesPrimitive {
	altAsLabel?: InternationalString;
	region?: string;
	thumbnail: IIIFExternalWebResource[];
}
export interface PrimitivesValue extends PrimitivesPrimitive {
	as?: "span" | "dd";
	value: InternationalString;
}
export interface CloverPrimitivesComposition {
	ContentResource: React.FC<PrimitivesContentResource>;
	Homepage: React.FC<PrimitivesHomepage>;
	Label: React.FC<PrimitivesLabel>;
	Markup: React.FC<PrimitivesMarkup>;
	Metadata: React.FC<PrimitivesMetadata>;
	MetadataItem: React.FC<PrimitivesMetadataItem>;
	PartOf: React.FC<PrimitivesPartOf>;
	RequiredStatement: React.FC<PrimitivesRequiredStatement>;
	SeeAlso: React.FC<PrimitivesSeeAlso>;
	Summary: React.FC<PrimitivesSummary>;
	Thumbnail: React.FC<PrimitivesThumbnail>;
	Value: React.FC<PrimitivesValue>;
}
declare const _default: CloverPrimitivesComposition;
export interface ConfigOptions {
	breakpoints?: SwiperBreakpoints;
	credentials?: FetchCredentials;
}
export type CustomHomepage = Array<Omit<Collection["homepage"], "label"> & {
	label?: {
		none: string[];
	};
}>;
export type SliderItem = Omit<Collection | Manifest, "items"> & {
	homepage: CustomHomepage;
};
export type SwiperBreakpoints = SwiperProps["breakpoints"];
export type FetchCredentials = "omit" | "same-origin" | "include";
export interface CloverSliderProps {
	collectionId?: string;
	iiifContent: string;
	onItemInteraction?: (item: SliderItem) => void;
	options?: ConfigOptions;
}
declare const CloverSlider: React.FC<CloverSliderProps>;
export type ViewerConfigOptions = {
	annotationOverlays?: {
		backgroundColor?: string;
		borderColor?: string;
		borderType?: string;
		borderWidth?: string;
		opacity?: string;
		renderOverlays?: boolean;
		zoomLevel?: number;
	};
	background?: string;
	canvasBackgroundColor?: string;
	canvasHeight?: string;
	ignoreCaptionLabels?: string[];
	informationPanel?: {
		open?: boolean;
		renderAbout?: boolean;
		renderSupplementing?: boolean;
		renderToggle?: boolean;
		renderAnnotation?: boolean;
	};
	openSeadragon?: OpenSeadragonOptions;
	requestHeaders?: IncomingHttpHeaders;
	showIIIFBadge?: boolean;
	showTitle?: boolean;
	withCredentials?: boolean;
};
export type CustomDisplay = {
	display: {
		component: React.ElementType;
		componentProps?: Record<string, unknown>;
	};
	target: {
		canvasId?: string[];
		paintingFormat?: string[];
	};
};
export interface CloverViewerProps {
	canvasIdCallback?: (arg0: string) => void;
	customDisplays?: Array<CustomDisplay>;
	customTheme?: any;
	iiifContent: string;
	id?: string;
	manifestId?: string;
	options?: ViewerConfigOptions;
	iiifContentSearch?: string;
}
declare const CloverViewer: React.FC<CloverViewerProps>;

export {
	CloverSlider as Slider,
	CloverViewer as Viewer,
	CloverViewer as default,
	_default as Primitives,
};

export {};
