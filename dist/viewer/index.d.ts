// Generated by dts-bundle-generator v8.0.1

import { InternationalString } from '@iiif/presentation-3';
import { IncomingHttpHeaders } from 'http';
import { Options as OpenSeadragonOptions } from 'openseadragon';
import React from 'react';

export type ViewerConfigOptions = {
	annotationOverlays?: {
		backgroundColor?: string;
		borderColor?: string;
		borderType?: string;
		borderWidth?: string;
		opacity?: string;
		renderOverlays?: boolean;
		zoomLevel?: number;
	};
	background?: string;
	canvasBackgroundColor?: string;
	canvasHeight?: string;
	ignoreCaptionLabels?: string[];
	ignoreAnnotationOverlaysLabels?: string[];
	informationPanel?: {
		open?: boolean;
		renderAbout?: boolean;
		renderSupplementing?: boolean;
		renderToggle?: boolean;
		renderAnnotation?: boolean;
	};
	openSeadragon?: OpenSeadragonOptions;
	requestHeaders?: IncomingHttpHeaders;
	showIIIFBadge?: boolean;
	showTitle?: boolean;
	withCredentials?: boolean;
};
export type CustomDisplay = {
	display: {
		component: React.ElementType;
		componentProps?: Record<string, unknown>;
	};
	target: {
		canvasId?: string[];
		paintingFormat?: string[];
	};
};
export type PluginConfig = {
	id: string;
	menu?: {
		component: React.ElementType;
		componentProps?: Record<string, unknown>;
	};
	informationPanel?: {
		component: React.ElementType;
		componentProps?: Record<string, unknown>;
		label: InternationalString;
		displayIfNoAnnotations?: boolean;
	};
};
export interface CloverViewerProps {
	canvasIdCallback?: (arg0: string) => void;
	customDisplays?: Array<CustomDisplay>;
	plugins?: Array<PluginConfig>;
	customTheme?: any;
	iiifContent: string;
	id?: string;
	manifestId?: string;
	options?: ViewerConfigOptions;
}
declare const CloverViewer: React.FC<CloverViewerProps>;

export {
	CloverViewer as default,
};

export {};
